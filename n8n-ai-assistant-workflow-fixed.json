{
  "name": "AI Project Assistant Workflow",
  "nodes": [
    {
      "parameters": {
        "path": "/webhook/ai-assistant",
        "httpMethod": "POST",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-1",
      "name": "AI Assistant Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "ai-assistant-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "userId-check",
              "leftValue": "={{ $json.userId }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-2",
      "name": "Check User ID",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [480, 300]
    },
    {
      "parameters": {
        "functionCode": "const inputData = $input.first().json;\nif (!inputData.userId || !inputData.message) {\n  throw new Error('Missing required fields: userId and message');\n}\nconst processedData = {\n  userId: inputData.userId.toString().trim(),\n  message: inputData.message.toString().trim(),\n  sessionId: inputData.sessionId ? inputData.sessionId.toString().trim() : `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  timestamp: new Date().toISOString(),\n  context: inputData.context || {}\n};\nreturn [processedData];"
      },
      "id": "function-3",
      "name": "Parse User Input",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [720, 300]
    },
    {
      "parameters": {
        "functionCode": "const session = $input.first().json;\nconst isAnonymous = session.userId.startsWith('anonymous_');\nconst context = {\n  user: {\n    id: session.userId,\n    type: isAnonymous ? 'anonymous' : 'authenticated',\n    name: isAnonymous ? 'Guest User' : 'Authenticated User',\n    isAnonymous: isAnonymous\n  },\n  session: {\n    id: session.sessionId,\n    timestamp: session.timestamp\n  },\n  message: session.message,\n  intent: analyzeIntent(session.message)\n};\nfunction analyzeIntent(message) {\n  const lowerMessage = message.toLowerCase();\n  if (lowerMessage.includes('project')) return 'project_management';\n  if (lowerMessage.includes('task') || lowerMessage.includes('todo')) return 'task_management';\n  if (lowerMessage.includes('knowledge') || lowerMessage.includes('learn')) return 'knowledge_query';\n  if (lowerMessage.includes('help')) return 'help_request';\n  if (lowerMessage.includes('create') || lowerMessage.includes('add')) return 'create_request';\n  if (lowerMessage.includes('query') || lowerMessage.includes('search')) return 'query_request';\n  return 'general_conversation';\n}\nreturn [context];"
      },
      "id": "function-4",
      "name": "Build User Context",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [960, 300]
    },
    {
      "parameters": {
        "url": "{{ $env.SUPABASE_URL }}/rest/v1/projects?user_id=eq.{{ $json.user.id }}&select=*",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_ANON_KEY }}"
            }
          ]
        },
        "options": {}
      },
      "id": "http-5",
      "name": "Fetch User Projects",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1200, 200]
    },
    {
      "parameters": {
        "url": "{{ $env.SUPABASE_URL }}/rest/v1/chat_sessions?user_id=eq.{{ $json.user.id }}&order=created_at.desc&limit=10&select=*",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_ANON_KEY }}"
            }
          ]
        },
        "options": {}
      },
      "id": "http-6",
      "name": "Fetch Chat History",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1200, 400]
    },
    {
      "parameters": {
        "functionCode": "const context = $input.first().json;\nconst projectsResponse = $input.all()[1];\nconst chatHistoryResponse = $input.all()[2];\nlet projects = [];\nif (projectsResponse && projectsResponse.json) {\n  projects = Array.isArray(projectsResponse.json) ? projectsResponse.json : [projectsResponse.json];\n}\nlet chatHistory = [];\nif (chatHistoryResponse && chatHistoryResponse.json) {\n  chatHistory = Array.isArray(chatHistoryResponse.json) ? chatHistoryResponse.json : [chatHistoryResponse.json];\n}\nconst enhancedContext = {\n  ...context,\n  data: {\n    projects: projects,\n    chatHistory: chatHistory.slice(0, 5),\n    projectCount: projects.length,\n    hasProjects: projects.length > 0\n  }\n};\nreturn [enhancedContext];"
      },
      "id": "function-7",
      "name": "Process Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1440, 300]
    },
    {
      "parameters": {
        "functionCode": "const context = $input.first().json;\nlet responseMessage = '';\nswitch (context.intent) {\n  case 'project_management':\n    if (context.data.projects.length === 0) {\n      responseMessage = \"您目前还没有创建任何项目。我可以帮您：\\\\n• 创建新项目\\\\n• 了解如何开始项目管理\\\\n\\\\n您想创建第一个项目吗？\";\n    } else {\n      responseMessage = `您有 ${context.data.projects.length} 个项目。我可以帮您管理这些项目。`;\n    }\n    break;\n  case 'task_management':\n    responseMessage = \"我可以帮您管理任务。请告诉我您想操作哪个项目的任务？\";\n    break;\n  case 'knowledge_query':\n    responseMessage = \"我可以帮您查询知识库。您想查询哪个项目的知识库？\";\n    break;\n  case 'help_request':\n    responseMessage = \"我是您的AI项目助手，我可以帮您：\\\\n\\\\n📁 项目管理\\\\n✅ 任务管理\\\\n📚 知识库查询\\\\n💡 学习建议\\\\n\\\\n请告诉我您需要什么帮助？\";\n    break;\n  default:\n    responseMessage = `您好！我是您的AI项目助手。${context.data.hasProjects ? `我看到您有 ${context.data.projectCount} 个项目。` : '您还没有创建项目。'} 有什么可以帮您的吗？`;\n}\nconst response = {\n  success: true,\n  response: {\n    message: responseMessage,\n    sessionId: context.session.id,\n    timestamp: new Date().toISOString(),\n    context: {\n      intent: context.intent,\n      hasProjects: context.data.hasProjects,\n      projectCount: context.data.projectCount\n    }\n  }\n};\nreturn [response];"
      },
      "id": "function-8",
      "name": "Generate AI Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1680, 300]
    },
    {
      "parameters": {
        "url": "{{ $env.SUPABASE_URL }}/rest/v1/chat_sessions",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "bodyParameters": {
          "parameters": [
            {
              "name": "user_id",
              "value": "={{ $json.context.user.id }}"
            },
            {
              "name": "session_id",
              "value": "={{ $json.response.sessionId }}"
            },
            {
              "name": "user_message",
              "value": "={{ $json.context.message }}"
            },
            {
              "name": "ai_response",
              "value": "={{ $json.response.message }}"
            },
            {
              "name": "context",
              "value": "={{ $json.response.context }}"
            },
            {
              "name": "is_anonymous",
              "value": "={{ $json.context.user.isAnonymous }}"
            }
          ]
        },
        "options": {}
      },
      "id": "http-9",
      "name": "Save Chat History",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1920, 300]
    },
    {
      "parameters": {
        "mode": "lastNode"
      },
      "id": "noop-10",
      "name": "Return Response",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [2160, 300]
    },
    {
      "parameters": {
        "functionCode": "const errorResponse = {\n  success: false,\n  error: {\n    code: \"MISSING_USER_ID\",\n    message: \"用户ID不能为空\",\n    details: \"请提供有效的用户ID以继续使用AI助手服务\"\n  }\n};\nreturn [errorResponse];"
      },
      "id": "function-11",
      "name": "Error Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [480, 500]
    }
  ],
  "connections": {
    "AI Assistant Webhook": {
      "main": [
        [
          {
            "node": "Check User ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check User ID": {
      "main": [
        [
          {
            "node": "Parse User Input",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse User Input": {
      "main": [
        [
          {
            "node": "Build User Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build User Context": {
      "main": [
        [
          {
            "node": "Fetch User Projects",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Chat History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch User Projects": {
      "main": [
        [
          {
            "node": "Process Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Chat History": {
      "main": [
        [
          {
            "node": "Process Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Data": {
      "main": [
        [
          {
            "node": "Generate AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Response": {
      "main": [
        [
          {
            "node": "Save Chat History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Chat History": {
      "main": [
        [
          {
            "node": "Return Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Response": {
      "main": [
        [
          {
            "node": "Return Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}