{
  "name": "AI项目助手工作流",
  "nodes": [
    {
      "parameters": {
        "path": "/webhook",
        "responseMode": "responseNode"
      },
      "id": "1",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "ai-assistant-webhook"
    },
    {
      "parameters": {
        "jsCode": "// 解析Webhook数据\nconst { userId, message, sessionId } = $input.first().json;\n\n// 验证必要参数\nif (!userId || !message) {\n  throw new Error('缺少必要参数: userId 或 message');\n}\n\n// 返回处理后的数据\nreturn {\n  userId: userId.trim(),\n  message: message.trim(),\n  sessionId: sessionId || `session_${Date.now()}`,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "2",
      "name": "解析用户输入",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "getRow",
        "schema": "public",
        "table": "users",
        "getRowId": "={{ $json.userId }}"
      },
      "id": "3",
      "name": "获取用户信息",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [680, 200],
      "credentials": {
        "postgres": "supabase-connection"
      }
    },
    {
      "parameters": {
        "operation": "getRows",
        "schema": "public",
        "table": "projects",
        "additionalFields": {
          "whereClause": "user_id = {{ $json.userId }}"
        }
      },
      "id": "4",
      "name": "获取用户项目",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [680, 400],
      "credentials": {
        "postgres": "supabase-connection"
      }
    },
    {
      "parameters": {
        "jsCode": "// 合并用户信息和项目数据\nconst userData = $input.all()[0].json;\nconst projectsData = $input.all()[1].json;\n\n// 构建上下文信息\nconst context = {\n  user: {\n    id: userData.id,\n    name: userData.name,\n    email: userData.email,\n    preferences: userData.preferences || {}\n  },\n  projects: projectsData.map(project => ({\n    id: project.id,\n    name: project.name,\n    description: project.description,\n    status: project.status,\n    knowledgeBase: project.knowledge_base || [],\n    tasks: project.tasks || []\n  })),\n  currentSession: $input.first().json\n};\n\nreturn context;"
      },
      "id": "5",
      "name": "构建上下文",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [920, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4"
            },
            {
              "name": "messages",
              "value": "=[\n  {\n    \"role\": \"system\",\n    \"content\": \"你是一个专业的AI项目助手，专门帮助用户管理项目任务和知识库。请根据用户的项目信息和上下文提供智能建议和帮助。\"\n  },\n  {\n    \"role\": \"user\",\n    \"content\": \"用户信息: {{ $json.user.name }} ({{ $json.user.email }})\\n当前项目数量: {{ $json.projects.length }}\\n用户消息: {{ $json.currentSession.message }}\\n\\n可用项目信息:\\n{{ $json.projects.map(p => `- ${p.name}: ${p.description} (状态: ${p.status})`).join('\\\\n') }}\\n\\n请根据以上信息智能回复用户的问题。\"\n  }\n]"
            },
            {
              "name": "max_tokens",
              "value": "1000"
            },
            {
              "name": "temperature",
              "value": "0.7"
            }
          ]
        },
        "options": {}
      },
      "id": "6",
      "name": "调用AI服务",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1160, 300],
      "credentials": {
        "httpRequest": "openai-api-key"
      }
    },
    {
      "parameters": {
        "jsCode": "// 解析AI响应\nconst aiResponse = $input.first().json;\nconst context = $input.all()[1].json;\n\n// 提取AI回复内容\nconst aiMessage = aiResponse.choices[0].message.content;\n\n// 构建响应数据\nreturn {\n  success: true,\n  response: {\n    message: aiMessage,\n    sessionId: context.currentSession.sessionId,\n    timestamp: new Date().toISOString(),\n    context: {\n      userId: context.user.id,\n      projectCount: context.projects.length,\n      usedProjects: context.projects.filter(p => \n        aiMessage.toLowerCase().includes(p.name.toLowerCase())\n      ).map(p => p.name)\n    }\n  }\n};"
      },
      "id": "7",
      "name": "处理AI响应",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1400, 300]
    },
    {
      "parameters": {
        "operation": "insertRow",
        "schema": "public",
        "table": "chat_sessions",
        "additionalFields": {
          "columns": "user_id, session_id, user_message, ai_response, created_at"
        },
        "values": "={{ $json.user.id }}, {{ $json.response.sessionId }}, {{ $json.context.currentSession.message }}, {{ $json.response.message }}, {{ $json.response.timestamp }}"
      },
      "id": "8",
      "name": "保存聊天记录",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1620, 300],
      "credentials": {
        "postgres": "supabase-connection"
      }
    },
    {
      "parameters": {
        "mode": "lastNode"
      },
      "id": "9",
      "name": "返回响应",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [1840, 300]
    },
    {
      "parameters": {
        "jsCode": "// 错误处理\nconst error = $input.first().json;\n\n// 构建错误响应\nreturn {\n  success: false,\n  error: {\n    message: error.message || '处理请求时发生错误',\n    code: error.code || 'UNKNOWN_ERROR',\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "10",
      "name": "错误处理",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1160, 500]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "解析用户输入",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "解析用户输入": {
      "main": [
        [
          {
            "node": "获取用户信息",
            "type": "main",
            "index": 0
          },
          {
            "node": "获取用户项目",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "获取用户信息": {
      "main": [
        [
          {
            "node": "构建上下文",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "获取用户项目": {
      "main": [
        [
          {
            "node": "构建上下文",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "构建上下文": {
      "main": [
        [
          {
            "node": "调用AI服务",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "调用AI服务": {
      "main": [
        [
          {
            "node": "处理AI响应",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "错误处理",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "处理AI响应": {
      "main": [
        [
          {
            "node": "保存聊天记录",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "保存聊天记录": {
      "main": [
        [
          {
            "node": "返回响应",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "错误处理": {
      "main": [
        [
          {
            "node": "返回响应",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}